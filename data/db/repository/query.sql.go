// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
)

const addImage = `-- name: AddImage :exec
INSERT INTO entity_image_list(service, entity_id, image_path, is_cover)
VALUES ($1, $2, $3, $4)
`

type AddImageParams struct {
	Service   string
	EntityID  string
	ImagePath string
	IsCover   bool
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) error {
	_, err := q.db.Exec(ctx, addImage,
		arg.Service,
		arg.EntityID,
		arg.ImagePath,
		arg.IsCover,
	)
	return err
}

const create = `-- name: Create :exec
INSERT INTO entity_state(service, entity_id, image_count, status, max_count)
VALUES ($1, $2, 0, $3, $4)
`

type CreateParams struct {
	Service  string
	EntityID string
	Status   string
	MaxCount int32
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.Service,
		arg.EntityID,
		arg.Status,
		arg.MaxCount,
	)
	return err
}

const getEntityState = `-- name: GetEntityState :one
SELECT service, entity_id, image_count, status, max_count
FROM entity_state
WHERE service = $1 AND entity_id = $2
`

type GetEntityStateParams struct {
	Service  string
	EntityID string
}

func (q *Queries) GetEntityState(ctx context.Context, arg GetEntityStateParams) (EntityState, error) {
	row := q.db.QueryRow(ctx, getEntityState, arg.Service, arg.EntityID)
	var i EntityState
	err := row.Scan(
		&i.Service,
		&i.EntityID,
		&i.ImageCount,
		&i.Status,
		&i.MaxCount,
	)
	return i, err
}

const getImageCover = `-- name: GetImageCover :one
SELECT service, entity_id, image_path, is_cover
FROM entity_image_list
WHERE service = $1 AND entity_id = $2 AND is_cover = true
`

type GetImageCoverParams struct {
	Service  string
	EntityID string
}

func (q *Queries) GetImageCover(ctx context.Context, arg GetImageCoverParams) (EntityImageList, error) {
	row := q.db.QueryRow(ctx, getImageCover, arg.Service, arg.EntityID)
	var i EntityImageList
	err := row.Scan(
		&i.Service,
		&i.EntityID,
		&i.ImagePath,
		&i.IsCover,
	)
	return i, err
}

const getImageList = `-- name: GetImageList :many
SELECT service, entity_id, image_path, is_cover
FROM entity_image_list
WHERE service = $1 AND entity_id = $2
`

type GetImageListParams struct {
	Service  string
	EntityID string
}

func (q *Queries) GetImageList(ctx context.Context, arg GetImageListParams) ([]EntityImageList, error) {
	rows, err := q.db.Query(ctx, getImageList, arg.Service, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntityImageList
	for rows.Next() {
		var i EntityImageList
		if err := rows.Scan(
			&i.Service,
			&i.EntityID,
			&i.ImagePath,
			&i.IsCover,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setBusyStatus = `-- name: SetBusyStatus :exec
UPDATE entity_state
SET status = $1
WHERE service = $2 AND entity_id = $3
`

type SetBusyStatusParams struct {
	Status   string
	Service  string
	EntityID string
}

func (q *Queries) SetBusyStatus(ctx context.Context, arg SetBusyStatusParams) error {
	_, err := q.db.Exec(ctx, setBusyStatus, arg.Status, arg.Service, arg.EntityID)
	return err
}

const setCountAndFreeStatus = `-- name: SetCountAndFreeStatus :exec
UPDATE entity_state
SET image_count = image_count + $1, status = $2
WHERE service = $3 AND entity_id = $4
`

type SetCountAndFreeStatusParams struct {
	ImageCount int32
	Status     string
	Service    string
	EntityID   string
}

func (q *Queries) SetCountAndFreeStatus(ctx context.Context, arg SetCountAndFreeStatusParams) error {
	_, err := q.db.Exec(ctx, setCountAndFreeStatus,
		arg.ImageCount,
		arg.Status,
		arg.Service,
		arg.EntityID,
	)
	return err
}
