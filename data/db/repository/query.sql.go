// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
)

const addImage = `-- name: AddImage :exec
INSERT INTO entity_image_list(service, entity_id, image_path, is_cover)
VALUES ($1, $2, $3, $4)
`

type AddImageParams struct {
	Service   string
	EntityID  string
	ImagePath string
	IsCover   bool
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) error {
	_, err := q.db.Exec(ctx, addImage,
		arg.Service,
		arg.EntityID,
		arg.ImagePath,
		arg.IsCover,
	)
	return err
}

const createEntity = `-- name: CreateEntity :exec
INSERT INTO entity_state(service, entity_id, image_count, status, max_count)
VALUES ($1, $2, 0, $3, $4)
`

type CreateEntityParams struct {
	Service  string
	EntityID string
	Status   string
	MaxCount int32
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) error {
	_, err := q.db.Exec(ctx, createEntity,
		arg.Service,
		arg.EntityID,
		arg.Status,
		arg.MaxCount,
	)
	return err
}

const decrementImageCount = `-- name: DecrementImageCount :exec
UPDATE entity_state
SET image_count = image_count + 1
WHERE service = $1 AND entity_id = $2
`

type DecrementImageCountParams struct {
	Service  string
	EntityID string
}

func (q *Queries) DecrementImageCount(ctx context.Context, arg DecrementImageCountParams) error {
	_, err := q.db.Exec(ctx, decrementImageCount, arg.Service, arg.EntityID)
	return err
}

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entity_state
WHERE service = $1 AND entity_id = $2
`

type DeleteEntityParams struct {
	Service  string
	EntityID string
}

func (q *Queries) DeleteEntity(ctx context.Context, arg DeleteEntityParams) error {
	_, err := q.db.Exec(ctx, deleteEntity, arg.Service, arg.EntityID)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM entity_image_list
WHERE image_path = $1
`

func (q *Queries) DeleteImage(ctx context.Context, imagePath string) error {
	_, err := q.db.Exec(ctx, deleteImage, imagePath)
	return err
}

const getCoverImage = `-- name: GetCoverImage :one
SELECT service, entity_id, image_path, is_cover
FROM entity_image_list
WHERE service = $1 AND entity_id = $2 AND is_cover = true
`

type GetCoverImageParams struct {
	Service  string
	EntityID string
}

func (q *Queries) GetCoverImage(ctx context.Context, arg GetCoverImageParams) (EntityImageList, error) {
	row := q.db.QueryRow(ctx, getCoverImage, arg.Service, arg.EntityID)
	var i EntityImageList
	err := row.Scan(
		&i.Service,
		&i.EntityID,
		&i.ImagePath,
		&i.IsCover,
	)
	return i, err
}

const getEntityState = `-- name: GetEntityState :one
SELECT service, entity_id, image_count, status, max_count
FROM entity_state
WHERE service = $1 AND entity_id = $2
`

type GetEntityStateParams struct {
	Service  string
	EntityID string
}

func (q *Queries) GetEntityState(ctx context.Context, arg GetEntityStateParams) (EntityState, error) {
	row := q.db.QueryRow(ctx, getEntityState, arg.Service, arg.EntityID)
	var i EntityState
	err := row.Scan(
		&i.Service,
		&i.EntityID,
		&i.ImageCount,
		&i.Status,
		&i.MaxCount,
	)
	return i, err
}

const getImageList = `-- name: GetImageList :many
SELECT service, entity_id, image_path, is_cover
FROM entity_image_list
WHERE service = $1 AND entity_id = $2
`

type GetImageListParams struct {
	Service  string
	EntityID string
}

func (q *Queries) GetImageList(ctx context.Context, arg GetImageListParams) ([]EntityImageList, error) {
	rows, err := q.db.Query(ctx, getImageList, arg.Service, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntityImageList
	for rows.Next() {
		var i EntityImageList
		if err := rows.Scan(
			&i.Service,
			&i.EntityID,
			&i.ImagePath,
			&i.IsCover,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementImageCount = `-- name: IncrementImageCount :exec
UPDATE entity_state
SET image_count = image_count + 1
WHERE service = $1 AND entity_id = $2
`

type IncrementImageCountParams struct {
	Service  string
	EntityID string
}

func (q *Queries) IncrementImageCount(ctx context.Context, arg IncrementImageCountParams) error {
	_, err := q.db.Exec(ctx, incrementImageCount, arg.Service, arg.EntityID)
	return err
}

const setStatus = `-- name: SetStatus :exec
UPDATE entity_state
SET status = $1
WHERE service = $2 AND entity_id = $3
`

type SetStatusParams struct {
	Status   string
	Service  string
	EntityID string
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.db.Exec(ctx, setStatus, arg.Status, arg.Service, arg.EntityID)
	return err
}
